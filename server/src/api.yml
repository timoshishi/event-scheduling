openapi: 3.0.0
info:
  version: 1.0.0
  title: Event Scheduling API
  description: Rudimentary Event Scheduling API
  contact:
    name: Tim Forrest
    email: timfrrst@gmail.com
    url: 'https://timforrest.dev'
  license:
    name: Not for commercial use
    url: 'https://rightsstatements.org/page/InC-NC/1.0/'
servers:
  - description: Local server
    url: 'http://localhost:3000'
paths:
  /events:
    get:
      tags:
        - Events
      summary: 'Gets an array of events according to query parameters'
      description:
        'Returns an array of events. Defaults to all events. The sort is by insertion order descending for easier
        validation'
      parameters:
        - in: query
          name: participantUserId
          description: The user ID of the participant
          schema:
            type: integer
          required: false
        - in: query
          name: hostId
          description: The user ID of the host
          schema:
            type: integer
          required: false
        - in: query
          name: eventStart
          description: Must be prior to eventEnd
          schema:
            type: string
            format: date-time
          required: false
        - in: query
          name: eventEnd
          schema:
            type: string
          required: false
        - in: query
          name: include
          description: 'Include host and or participants in the response'
          schema:
            type: array
            items:
              type: string
              enum:
                - host
                - participants
      operationId: getEvents
      responses:
        '200':
          description: Events response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventArrayResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Events
      summary: Creates a new event. Names are not required to be unique
      description: 'Creates a new event. Names are not required to be unique, Returns the created object'
      operationId: addEvent
      requestBody:
        description: Event to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
      responses:
        '200':
          description: event response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: no event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{eventId}':
    put:
      tags:
        - Events
      summary: Updates and returns an event
      description: Updates an event
      operationId: updateEvent
      requestBody:
        description: Event to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
      parameters:
        - name: eventId
          in: path
          description: ID of event to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: event response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Events
      summary: deletes a single event and participants of the event based on the ID supplied
      description: deletes a single event based on the ID supplied
      operationId: deleteEvent
      parameters:
        - name: eventId
          in: path
          description: ID of event to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: event deleted
        '404':
          description: no event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Events
      summary: Gets a single event with the id in the path param
      description: Gets a single event with the id in the path param
      operationId: getEvent
      parameters:
        - name: eventId
          in: path
          description: ID of event to get
          required: true
          schema:
            type: integer
            format: int64
        - name: include
          in: query
          description: Enum values of "host" or "participants to include them in the response"
          schema:
            type: array
            items:
              type: string
              enum:
                - host
                - participants
          required: false
          # explode: false
      responses:
        '200':
          description: event response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '404':
          description: no event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{eventId}/participants/{participantUserId}':
    put:
      tags:
        - Participants
      summary: adds a participant to an event
      description:
        'adds a participant to an event, if the participant is already in the event, there will be no change applied'
      operationId: addParticipantToEvent
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewParticipant'
      parameters:
        - name: eventId
          in: path
          description: ID of event to add participant to
          required: true
          schema:
            type: integer
            format: int64
        - name: participantUserId
          in: path
          description: User ID of participant to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Participant added
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Participants
      summary: deletes a participant from an event
      description: deletes a participant from an event
      operationId: deleteParticipant
      parameters:
        - name: eventId
          in: path
          description: ID of event remove participant from
          required: true
          schema:
            type: integer
            format: int64
        - name: participantUserId
          in: path
          description: User ID of participant to remove from event
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: participant deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{eventId}/participants/{participantUserId}/status':
    put:
      tags:
        - Participants
      summary: updates a participants status of if they will attend
      description: updates a participants status of if they will attend
      operationId: updateParticipantAttendance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantAttendance'
      parameters:
        - name: eventId
          in: path
          description: ID of event to add participant to
          required: true
          schema:
            type: integer
            format: int64
        - name: participantUserId
          in: path
          description: User ID of participant to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: participant status updated
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{eventId}/hosts':
    delete:
      tags:
        - Hosts
      summary: deletes a host from an event
      description: deletes a host from an event
      operationId: deleteHost
      parameters:
        - name: eventId
          in: path
          description: ID of event to remove the host from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: host deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/events/{eventId}/hosts/{hostId}':
    put:
      tags:
        - Hosts
      summary: Add host to an event
      description:
        'Adds a host to an event. If a host already exists, the old host will be replaced with the host sent in.'
      operationId: addHost
      parameters:
        - name: eventId
          in: path
          description: ID of event to add host to
          required: true
          schema:
            type: integer
            format: int64
        - name: hostId
          in: path
          description: ID of event to add host to
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: host added
        '400':
          description: host already exists
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
        - Users
      summary: Returns all users
      description: Returns all users
      operationId: getUsers
      responses:
        '200':
          description: users response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArrayResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Users
      summary: 'Creates a new user. Names are not required to be unique, Returns the created object'
      description: 'Creates a new user. Names are not required to be unique, Returns the created object'
      operationId: addUser
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/users/{userId}':
    delete:
      tags:
        - Users
      summary: deletes a single user based on the ID supplied
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: user deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Users
      summary: Gets a single user with the id in the path param
      description: Gets a single user with the id in the path param
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Updates a single user with the id in the path param
      description: Updates a single user with the id in the path param
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User name to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Event:
      allOf:
        - $ref: '#/components/schemas/NewEvent'
        - type: object
          required:
            - id
            - createdAt
            - updatedAt
          properties:
            id:
              type: integer
              format: int64
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            participants:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/Participant'
            hostId:
              type: integer
              nullable: true
            host:
              allOf:
                - anyOf:
                    - $ref: '#/components/schemas/null_type'
                    - $ref: '#/components/schemas/User'
    NewEvent:
      type: object
      required:
        - eventName
        - eventStart
        - eventEnd
      properties:
        eventName:
          type: string
        eventStart:
          description: Must be prior to eventEnd
          type: string
          format: date-time
        eventEnd:
          type: string
          format: date-time
    EventResponse:
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/Event'
    EventArrayResponse:
      type: object
      properties:
        data:
          items:
            $ref: '#/components/schemas/Event'
    Participant:
      allOf:
        - $ref: '#/components/schemas/NewParticipant'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            willAttend:
              type: boolean
            eventId:
              type: integer
              format: int64
            userId:
              type: integer
              format: int64
    NewParticipant:
      type: object
      properties:
        attendanceRequired:
          type: boolean
    ParticipantAttendance:
      type: object
      required:
        - willAttend
      properties:
        willAttend:
          type: boolean
    User:
      nullable: true
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    NewUser:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    UserResponse:
      type: object
      required:
        - data
      properties:
        data:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/User'
    UserArrayResponse:
      type: object
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
    Error:
      type: object
      properties:
        message:
          type: string
    NotFound:
      type: object
      properties:
        data:
          nullable: true
    null_type:
      title: 'OpenAPI 3.0 null-type ref'
      description: 'for adding nullability to a ref'
      enum: [null]
